/**
 * Fake example of Object Oriented Programming
 * A library lending and returning system
 * 
 * For Cousera PKU java courses, assignment week 4.
 * @author Runsheng Song
 * @time: May 19
 */




public class OR_try {

	public static void main(String[] args) {
		manager m1 = new manager("Dumbledore"); //init the manager of this library
		m1.checkIn(); //manager check in
		
		book book1 = new book ("Game of Thrones"); //init a instance of book
		m1.addBook(book1); //let the manager add this book in library
//		System.out.println(book1.getVol()); //check the vol of this book
		m1.addBook(book1); //add another one
//		System.out.println(book1.getVol()); //check the vol of this book
		book book2 = new book("Harry Potter and Hermione Granger's Happy Wedding"); //init another book instance, this is A REAL STORY!
		m1.addBook(book2); //adding this great book to library
		
		//now there is a student coming to borrow this book
		student s1 = new student ("Ron");
		s1.checkIn();
		s1.borrowBook(book2,1);
		
	}

}


interface collection{ public int getVol(); public void setVol(int num);}

abstract class people {
	String name;
	people(String name){this.name = name;}
	
	static int totPeople = 0;
	abstract void checkIn ();
	
	void checkOut(){System.out.println("Check out!"); }
	void getPeopleNum(){
		System.out.println("The number of people check in today is: "+ totPeople);
	}
}




final class manager extends people {

	manager(String name) {
		super(name);
		// TODO Auto-generated constructor stub
	}

	void checkIn(){
		System.out.println("Manager "+ this.name + " check in!");
	}
	
	@Override
	void checkOut(){System.out.println("Manager"+ this.name + "check out!");}
		
	void addBook(book book){
//		System.out.println(book.name + " added!");
		book.setVol(1);
	}

}

 class student extends people{
	student(String name) {
		super(name);
		// TODO Auto-generated constructor stub
	}
	void checkIn(){
		System.out.println("Student " +this.name + " check in!");
		people.totPeople++;
	}
	void borrowBook(book book, int amount){
		if ( (book.getVol())>=1)  
		{
			//if we do have enough this book
			if (book.getVol()>= amount) {book.setVol(-1);}
			else {
				System.out.println("We don't have enough volunm "+ book.name+ " that meet your ask! ");
				System.out.println("We only have" + book.getVol() + " of it");
			}
			
		}
		else {
			System.out.println("Sorry, we are running out of "+ book.name +", this book is so popular, please check back later!");
		}
	}
}


 
class book implements collection{
	String name;
	
	private int vol;
	book(String name){
		this.name = name;
		this.vol = 0;
	}
	public int getVol(){
//		System.out.println("The volunm of this book is: "+ this.vol);
		return this.vol;
	}
	
	
	public void setVol(int num){
		if (num>0){
			this.vol = this.vol + num;
			System.out.println("Added " + num + " volunm of "+ this.name);
		}
		else if (num<0){
			this.vol = this.vol+num;
			System.out.println("Checked out " + Math.abs(num) + " volunm of " + this.name);
			System.out.println("Now this library has " + this.getVol() + " volunm of " + this.name);
		}
		else {System.out.println("Nothing happened");}
	}
}
