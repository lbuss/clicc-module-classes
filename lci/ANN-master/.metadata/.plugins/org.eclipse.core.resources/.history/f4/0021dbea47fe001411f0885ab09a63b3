'''
Created on May 7, 2015

@author: rsong_admin
'''
from audioop import bias


'''
Created on Apr 28, 2015

the class defination 


@author: rsong_admin
'''

from pybrain.datasets            import ClassificationDataSet
from pybrain.tools.shortcuts     import buildNetwork
from pybrain.supervised.trainers import BackpropTrainer

from numpy import array, array_split
from pybrain.utilities           import percentError
from pybrain.tools.customxml import NetworkWriter
from pybrain.tools.customxml import NetworkReader
import matplotlib.pyplot as plt
import numpy as np 
import pca
import csv
from scipy import dot, argmax
from pybrain.structure.modules.sigmoidlayer import SigmoidLayer
from pybrain.tools.validation import CrossValidator
from pybrain.tools.validation import ModuleValidator
from numpy.random.mtrand import permutation

class ANN:
    
    
    trainer=None
    network=None; '''a network instance'''
    
    '''input data'''
    descriptors=None
    target=None
    descriptors_pca=None
    data_set=None
    trndata=None
    tstdata=None
    num_classes=None
    

    
    '''important outputs'''
    r_squared=None
    median_error=None
    predicted_value=None
    
    
    
    def __init__(self,X_filename,Y_filename=None):
        '''some important factors'''
        
        '''loading data'''
        self._load_training_data(X_filename, Y_filename)
        

    def _load_training_data(self,X_filename,Y_filename):
        '''
        X and Y values wull be loaded here 
        '''
        
        self.descriptors=np.loadtxt(X_filename, delimiter=',', skiprows=0);
        print "Descriptors loaded!"
        if Y_filename is not None:
            self.target=np.loadtxt(Y_filename,delimiter=',',skiprows=0);
            self.num_classes=int(np.max(self.target))+1
            
            print "Target for training loaded!"
            print "Number of classes is: ", self.num_classes
        
    def do_pca(self,user_input=0,threshold_input=0):
        '''PCA will be doen here'''
        
        '''check if decriptors is None'''
        if self.descriptors is None:
            print "Please load raw descriptors!"
        else:
            this_pca=pca.pca(self.descriptors,user_input,threshold_input)
            self.descriptors_pca=this_pca.get_pca()
            print "pca has done"
            print "New data dimension is ",self.descriptors_pca.shape
    
    def set_dataset(self):
        '''put training data into pybrain object'''
        
        '''check if descriptor_pca is none'''
        if self.descriptors_pca is None:
            print "Please load or do PCA first before setting up training data!"
        else:
            num_row=self.descriptors_pca.shape[0]
            num_col=self.descriptors_pca.shape[1]
            
            self.data_set = ClassificationDataSet(num_col, 1,nb_classes=self.num_classes)

            for num_data in range(num_row):
                inputs=self.descriptors_pca[num_data,:]
                outputs=self.target[num_data]
                self.data_set.addSample(inputs, [outputs])
            
            
            print "Pybrain data object has been set up."
        

    def train_net(self,training_times_input=500,learning_rate_input=0.1,weight_decay=0.1,momentum_in = 0,verbose_input=True):
        
        '''pass values'''
  
        '''
        self.r_squared=np.empty([training_times_input])
        self.median_error=np.empty([training_times_input])
        '''
        
        self.tstdata,self.trndata=self.data_set.splitWithProportion(0.2)
        
 
        self.tstdata._convertToOneOfMany()
        self.trndata._convertToOneOfMany()
        
        
        self.network=buildNetwork(self.trndata.indim,150,self.trndata.outdim,bias=True,hiddenclass=SigmoidLayer)
        self.trainer=BackpropTrainer( self.network, dataset=self.trndata,learningrate=learning_rate_input, momentum=momentum_in, verbose=True, weightdecay=weight_decay )
        
        
        
        
        for iter in range(training_times_input):
            print "Training", iter+1,"times"
            
            self.trainer.trainEpochs( 1 )
            
            trnresult = percentError( self.trainer.testOnClassData(),
                              self.trndata['class'] )
            tstresult = percentError( self.trainer.testOnClassData(dataset= self.tstdata ),  self.tstdata['class'] )

            print "epoch: %4d" % self.trainer.totalepochs, \
                "  train error: %5.2f%%" % trnresult, \
                "  test error: %5.2f%%" % tstresult
                
            
    def CrossValidation(self,n_fold=5,num_neuron=50):  

        data_set_this=self.data_set
        data_set_this._convertToOneOfMany()
        
        
        
        print "Training with number of neuron :",num_neuron
        
        network_this=buildNetwork(data_set_this.indim,num_neuron,data_set_this.outdim,bias=True,hiddenclass=SigmoidLayer)  
        trainer_this=BackpropTrainer(network_this,dataset=data_set_this,learningrate=0.001,momentum=0,verbose=True,weightdecay=0.1)
    
    
        CV=CrossValidator(trainer_this,data_set_this,num_neuron,n_folds=n_fold,max_epochs=1000)
        perf_this=CV.validate()
        
        
        print "The performance of this network with CV is: ", perf_this
    
       
    
    
    
    
    
    def CV_best_struct(self,n_fold=5):  

        data_set_this=self.data_set
        data_set_this._convertToOneOfMany()
        
        
        perf=[]
        for num_neuron in np.arange(60,180,5):
            print "Training with number of neuron :",num_neuron
            
            network_this=buildNetwork(data_set_this.indim,num_neuron,data_set_this.outdim,bias=True,hiddenclass=SigmoidLayer)  
            trainer_this=BackpropTrainer(network_this,dataset=data_set_this,learningrate=0.001,momentum=0,verbose=False,weightdecay=0.1)
        
        
            CV=CrossValidator(trainer_this,data_set_this,num_neuron,n_folds=n_fold,max_epochs=1000)
            perf_this=CV.validate()
            
            perf.append(perf_this)
            print "The performance of this network with CV is: ", perf_this
        
        print "All performance: ", perf
        output=open("CV_results_60to180.csv",'wb')
        filewriter=csv.writer(output)
        filewriter.writerow(perf)
       
        
    def predict(self,net,X_pca):
        '''
        run the prediction of the given data (descriptors) on the given network.
        '''

        out = []
        targ = []
        
        for input in X_pca:
            res = net.activate(input)

            out.append(argmax(res))
        
        self.predicted_value=out
        return out

    def calc_accuracy(self,real_value,predicted_value):
        '''
        this function calculate the median and average absolute error and relatively error 
        between the real_value and the predicted value
        '''
        true_right=np.empty(len(real_value))
        for iter in range(len(real_value)):
            if real_value[iter]==predicted_value[iter]:
                true_right[iter]=1
            else:
                true_right[iter]=0
        
        tot_right=sum(true_right)
        acc=tot_right/len(real_value)
        
        return acc
        
            
        
    
    def plot_diff(self,real_value,predicted_value):
        '''
        plot the line of real value and estimated value and plot the difference bar on the same graph
        '''
        num_row=real_value.shape[0] #this is the length of x axis
        
        data_all=np.array((real_value,predicted_value))
        data_all=np.transpose(data_all)
        
        data_all_sorted=data_all[data_all[:,0].argsort()]
        
        diff=data_all_sorted[:,1]-data_all_sorted[:,0]
        
        y_value=np.arange(num_row)
        
        fig=plt.figure()
        ax=fig.gca()
    #     print len(diff)
    #     print y_value.shape
        
        
        ax.plot(y_value,data_all_sorted[:,1],label="Estimated Values")
        ax.plot(y_value,data_all_sorted[:,0],label="Reported Values")
        ax.legend()
        ax.bar(y_value,diff)
        
        
        plt.show()
    
    
    def save_toFile(self,filename,pred):
        '''this function save the Numpy object array of prediction results to csv file'''
        np.savetxt('filename', pred, delimiter=',')
        
        
    
    
    def save_network(self,name_of_the_net):
        print "Saving the trained network to file"
        
        if self.network is None:
            print "Network has not been trained!!"
        else:
            NetworkWriter.writeToFile(self.network, name_of_the_net)
            print "Saving Finished"
    
    
    def load_network(self,name_of_the_net):
        print "load existing trained network"
        self.network=NetworkReader.readFrom(name_of_the_net)
        print "Succeed!"
    